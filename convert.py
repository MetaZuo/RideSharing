
# coding: utf-8

# In[1]:


import pandas as pd
import numpy as np
from rtree import index
import os


# In[2]:


max_node = 264346


# In[3]:


def gen_nodes_rtree():
    """
    Generate a rtree index for searching nearest neighborhood node of the trajectory
    
    Arguments:
    
    Returns: 
    R-Tree -- node indexed Rtree
    """
    inpath = r'.'
    in_name= r'COL.co'
    idx = index.Index()
    with open(inpath+os.sep+in_name, 'r') as f:
        for line in f:
            num_str, lon_str, lat_str = line.split()
            bottom = float(lat_str)
            left = float(lon_str)
            right, top = left, bottom
            num = int(num_str)
            idx.insert(num, (left, bottom, right, top))
    return idx


# In[4]:


def get_nearest_node(lat, lon, nodes_rtree):
    """
    Get the categories of the nearest node of special position of latitude and longitude

    Arguments:
    lat -- Latitude of the point
    lon -- Longitude of the point
    nodes_rtree -- the index tree generated by gen_nodes_rtree()
    
    Returns: 
    the number of node which is nearest to the point
    """
    ret = 0
    bottom = lat
    left = lon
    right, top = left, bottom
    l = list(nodes_rtree.nearest((left, bottom, right, top), 1))
    if l:
        ret = l[0]
        return ret


# In[5]:


nodes_rtree = gen_nodes_rtree()


# In[21]:


def convert(ori_path, req_path):
    data = {'start': [], 'start_lat': [], 'start_lon': [],
            'term': [], 'term_lat': [], 'term_lon': [],
            'time': []}

    f = open(ori_path, 'r')
    line = f.readline()
    n = int(line)
    f.readline()
    for i in range(n):
        for _ in range(8):
            f.readline()
        lines = []
        for _ in range(6):
            lines.append(f.readline())
        s_lat = float(lines[1])
        s_lon = float(lines[0])
        t_lat = float(lines[4])
        t_lon = float(lines[3])
        data['start'].append(get_nearest_node(s_lat, s_lon, nodes_rtree))
        data['start_lat'].append(s_lat)
        data['start_lon'].append(s_lon)
        data['term'].append(get_nearest_node(t_lat, t_lon, nodes_rtree))
        data['term_lat'].append(t_lat)
        data['term_lon'].append(t_lon)
        data['time'].append(int(float(lines[2]) / 1000))
        f.readline()
    f.close()

    df = pd.DataFrame(data)
    df = df[['time', 'start', 'term']].sort_values(by='time')
    df['time'] = df['time'] - df['time'].min()

    df.to_csv(req_path, header=None, index=None)
    return df



# In[ ]:

win_len = 10
dist_ranges = ['4', '6', '8', '10', 'ul']
for idx, dist_range in enumerate(dist_ranges):
    folder = 'range/' + dist_range + '/'
    minute = 420
    while minute < 540:
        minute_1 = minute + win_len
        filename = folder + 'problem_new_0_' + str(minute) + '_' + str(minute_1)
        req_path = 'range_data/' + dist_range + '/req_' + str(minute) + '_' + str(minute_1) + '.csv'
        veh_path = 'range_data/' + dist_range + '/veh_' + str(minute) + '_' + str(minute_1) + '.csv'
        convert(filename, req_path)
        print(filename)
        minute = minute_1

